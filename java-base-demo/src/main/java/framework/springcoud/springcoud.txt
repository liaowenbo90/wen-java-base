springcloud
	1、服务的注册与发现
		1.1、创建maven工程引入包，再创建两工程 
				一个注册中心 Eureka Server ,一个客户端 Eureka Client
				1.1.1 
					idea创建 server 服务 引用 cloud discovery->eureka serve
					引入 spring-cloud-starter-netflix-eureka-server
						    <dependencies>
								<dependency>
									<groupId>org.springframework.cloud</groupId>
									<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
								</dependency>
							</dependencies>
				1.1.2
					启动项类(EurekaApplication.java) 
						添加注解 @EnableEurekaServer
				1.1.3
				···没有后端缓存，每一个实例注册之后需要向注册中心发送心跳
					application.yml 配置参数
						server:
						  port: 8761

						eureka:
						  instance:
							hostname: localhost
						  client:
							registerWithEureka: false #来表明自己是一个eureka server.
							fetchRegistry: false   #来表明自己是一个eureka server.
							serviceUrl:
							  defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/

						spring:
						  application:
							name: eurka-server
				
				1.1.4 
					启动 http://localhost:8761
					
				1.2 
					创建服务提供者 eureka client
					当client向server注册时，它会提供一些元数据，例如主机和端口，URL，Eureka server 从每个client实例接收心跳消息。 如果心跳超时，则通常将该实例从注册server中删除
						pom.xml
					        <dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
							</dependency>
						1.2.1
							application类
								添加注解
									@EnableEurekaClient 表明自己是一个eurekaclient.
								
						1.2.2
							aplication.yml
							配置文件中注明自己的服务注册中心的地址
							
							server:
							  port: 8762

							spring:
							  application:
								name: service-hi

							eureka:
							  client:
								serviceUrl:
								  defaultZone: http://localhost:8761/eureka/

	2、rest+ribbon 服务消费				 
			服务与服务通讯基于http restful
			springCloud 调用服务 ribbon + restTemplate、feign
			1、ribbon	一个负载均衡客户端
			项目名 service-ribbon 
				1.1pom主要依赖 
					spring-cloud-starter-eureka
					spring-cloud-starter-ribbon
					spring-boot-starter-web
					    <dependencies>
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
							</dependency>
							<dependency>
								<groupId>org.springframework.boot</groupId>
								<artifactId>spring-boot-starter-web</artifactId>
							</dependency>
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
							</dependency>
						</dependencies>
				1.2 application.yml	
					指定注册中心
					
					eureka:
					  client:
						serviceUrl:
						  defaultZone: http://localhost:8761/eureka/
					server:
					  port: 8764
					spring:
					  application:
						name: service-ribbon
				1.3 工程启动类ServiceRibbonApplication.java
					@EnableDiscoveryClient向服务中心注册、并且向程序的ioc注入一个bean: 
					@LoadBalanced注解表明这个restRemplate开启负载均衡的功能
					
						@Bean
						@LoadBalanced
						RestTemplate restTemplate() {
							return new RestTemplate();
						}
				
					写一个测试类
						在ribbon中它会根据服务名来选择具体的服务实例，根据服务实例在请求的时候会用具体的url替换掉服务名
						
						@Service
						public class HelloService {

							@Autowired
							RestTemplate restTemplate;

							public String hiService(String name) {
								return restTemplate.getForObject("http://SERVICE-HI/hi?name="+name,String.class);
							}

						}
						
						@RestController
						public class HelloControler {

							@Autowired
							HelloService helloService;
							@RequestMapping(value = "/hi")
							public String hi(@RequestParam String name){
								return helloService.hiService(name);
							}


						}
						
						访问
							http://localhost:8764/hi?name=forezp
							
						启动两个 servier-hi 	

	3、feign 服务消费者 
			Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。
			整合了Hystrix，具有熔断的能力
			3.1 pom.xml
				依赖 spring-cloud-starter-feign、spring-cloud-starter-netflix-eureka-client、spring-boot-starter-web
				
			    <dependencies>
					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
					</dependency>
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-web</artifactId>
					</dependency>
					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-openfeign</artifactId>
					</dependency>
				</dependencies>
			3.2 aplication.yml
				
				eureka:
				  client:
					serviceUrl:
					  defaultZone: http://localhost:8761/eureka/
				server:
				  port: 8765
				spring:
				  application:
					name: service-feign
			3.3 启动类 ServiceFeignApplication.java	
				@SpringBootApplication
				@EnableEurekaClient
				@EnableDiscoveryClient
				@EnableFeignClients
				public class ServiceFeignApplication {

					public static void main(String[] args) {
						SpringApplication.run( ServiceFeignApplication.class, args );
					}
				}
			3.4 通过@ FeignClient（“服务名”），来指定调用哪个服务
				@FeignClient(value = "service-hi")
				public interface SchedualServiceHi {
					@RequestMapping(value = "/hi",method = RequestMethod.GET)
					String sayHiFromClientOne(@RequestParam(value = "name") String name);
				}
			3.5 controller层
				@RestController
				public class HiController {


					//编译器报错，无视。 因为这个Bean是在程序启动的时候注入的，编译器感知不到，所以报错。
					@Autowired
					SchedualServiceHi schedualServiceHi;

					@GetMapping(value = "/hi")
					public String sayHi(@RequestParam String name) {
						return schedualServiceHi.sayHiFromClientOne( name );
					}
				}

			3.6 启动程序，多次访问http://localhost:8765/hi?name=forezp
			
	4、断路器 Hystrix
			断路器模式：为阻止服务故障出现雪崩现象
			断路打开后，可用避免连锁故障，fallback方法可以直接返回一个固定值。
			4.1 serice-ribbon  pom.xml 
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
				</dependency>
			4.2 ServiceRibbonApplication  启动类 
				加 @EnableHystrix
				
				@SpringBootApplication
				@EnableEurekaClient
				@EnableDiscoveryClient
				@EnableHystrix
				public class ServiceRibbonApplication {

					public static void main(String[] args) {
						SpringApplication.run( ServiceRibbonApplication.class, args );
					}

					@Bean
					@LoadBalanced
					RestTemplate restTemplate() {
						return new RestTemplate();
					}

				}
			4.3 helloService 改造
				HelloService类，在hiService方法上加上@HystrixCommand注解。该注解对该方法创建了熔断器的功能
				
				@Service
				public class HelloService {

					@Autowired
					RestTemplate restTemplate;

					@HystrixCommand(fallbackMethod = "hiError")
					public String hiService(String name) {
						return restTemplate.getForObject("http://SERVICE-HI/hi?name="+name,String.class);
					}

					public String hiError(String name) {
						return "hi,"+name+",sorry,error!";
					}

				}
			4.4 
				启动 service-ribbon 工程，当我们访问http://localhost:8764/hi?name=forezp
				关闭 service-hi 工程，当我们再访问http://localhost:8764/hi?name=forezp
				service-ribbon调用 service-hi的API接口时，会执行快速失败，直接返回一组字符串，而不是等待响应超时，这很好的控制了容器的线程阻塞
				
				Feign中自带断路器 
					使用
						配置文件中配置打开它 feign.hystrix.enabled=true
						ervice-feign工程进行改造，只需要在FeignClient的SchedualServiceHi接口的注解中加上fallback的指定类就行
						
						@FeignClient(value = "service-hi",fallback = SchedualServiceHiHystric.class)
						public interface SchedualServiceHi {
							@RequestMapping(value = "/hi",method = RequestMethod.GET)
							String sayHiFromClientOne(@RequestParam(value = "name") String name);
						}

						SchedualServiceHiHystric需要实现SchedualServiceHi 接口，并注入到Ioc容器中
						@Component
						public class SchedualServiceHiHystric implements SchedualServiceHi {
							@Override
							public String sayHiFromClientOne(String name) {
								return "sorry "+name;
							}
						}

						四servcie-feign工程，浏览器打开http://localhost:8765/hi?name=forezp,注意此时service-hi工程没有启动
					
	5 路由网关（zuul）
		服务注册与发现、服务消费、负载均衡、断路器、智能路由、配置管理组成一个微服务 
		zuul 的主要功能是路由转发和过滤器
		创建 service-zuul工程
			5.1 pom.xml 依赖jar
			 <dependencies>
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
				</dependency>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-web</artifactId>
				</dependency>
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-starter-netflix-zuul</artifactId>
				</dependency>
			</dependencies>
			5.2 入口applicaton类加上注解@EnableZuulProxy
				@SpringBootApplication
				@EnableZuulProxy
				@EnableEurekaClient
				@EnableDiscoveryClient
				public class ServiceZuulApplication {

					public static void main(String[] args) {
						SpringApplication.run( ServiceZuulApplication.class, args );
					}
				}
			5.3 application.yml 配置参数
				eureka:
				  client:
					serviceUrl:
					  defaultZone: http://localhost:8761/eureka/
				server:
				  port: 8769
				spring:
				  application:
					name: service-zuul
				zuul:
				  routes:
					api-a:
					  path: /api-a/**
					  serviceId: service-ribbon
					api-b:
					  path: /api-b/**
					  serviceId: service-feign
			http://localhost:8761/eureka/，服务的端口为8769，服务名为service-zuul；以/api-a/ 开头的请求都转发给service-ribbon服务；以/api-b/开头的请求都转发给service-feign服务；
	
	6、分布式配置中心（Finchley）
		分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件
		spring cloud config
			config server 
			config client 
			6.1 构建 config Server
				pom.xml	
				
				   <modelVersion>4.0.0</modelVersion>

					<groupId>com.forezp</groupId>
					<artifactId>sc-f-chapter6</artifactId>
					<version>0.0.1-SNAPSHOT</version>
					<packaging>pom</packaging>

					<modules>
						<module>config-server</module>
						<module>config-client</module>
					</modules>

					<name>sc-f-chapter6</name>
					<description>Demo project for Spring Boot</description>

					<parent>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-parent</artifactId>
						<version>2.0.3.RELEASE</version>
						<relativePath/>
					</parent>

				   
					<properties>
						<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
						<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
						<java.version>1.8</java.version>
						<spring-cloud.version>Finchley.RELEASE</spring-cloud.version>
					</properties>

					<dependencies>
						<dependency>
							<groupId>org.springframework.boot</groupId>
							<artifactId>spring-boot-starter-test</artifactId>
							<scope>test</scope>
						</dependency>
					</dependencies>

					<dependencyManagement>
						<dependencies>
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-dependencies</artifactId>
								<version>${spring-cloud.version}</version>
								<type>pom</type>
								<scope>import</scope>
							</dependency>
						</dependencies>
					</dependencyManagement>

					<build>
						<plugins>
							<plugin>
								<groupId>org.springframework.boot</groupId>
								<artifactId>spring-boot-maven-plugin</artifactId>
							</plugin>
						</plugins>
					</build>

					
			6.2 创建一个springboot项目
					取名config-server
						pom.xml 引用	
								<groupId>com.forezp</groupId>
								<artifactId>config-server</artifactId>
								<version>0.0.1-SNAPSHOT</version>
								<packaging>jar</packaging>

								<name>config-server</name>
								<description>Demo project for Spring Boot</description>

								<parent>
									<groupId>com.forezp</groupId>
									<artifactId>sc-f-chapter6</artifactId>
									<version>0.0.1-SNAPSHOT</version>
								</parent>

								<dependencies>
									<dependency>
										<groupId>org.springframework.boot</groupId>
										<artifactId>spring-boot-starter-web</artifactId>
									</dependency>
									<dependency>
										<groupId>org.springframework.cloud</groupId>
										<artifactId>spring-cloud-config-server</artifactId>
									</dependency>
								</dependencies>
								<build>
									<plugins>
										<plugin>
											<groupId>org.springframework.boot</groupId>
											<artifactId>spring-boot-maven-plugin</artifactId>
										</plugin>
									</plugins>
								</build>

				6.2.1 	入口application类 加@EnableConfigServer
					@SpringBootApplication
					@EnableConfigServer
					public class ConfigServerApplication {

						public static void main(String[] args) {
							SpringApplication.run(ConfigServerApplication.class, args);
						}
					}
				6.2.2 aplication.properties 配置参数
					spring.application.name=config-server
					server.port=8888

					spring.cloud.config.server.git.uri=https://github.com/forezp/SpringcloudConfig/
					spring.cloud.config.server.git.searchPaths=respo
					spring.cloud.config.label=master
					spring.cloud.config.server.git.username=
					spring.cloud.config.server.git.password=

			启动程序：访问http://localhost:8888/foo/dev

			6.3 构建一个config client 
				6.3.1 pom.xml文件
				
				<modelVersion>4.0.0</modelVersion>

				<groupId>com.forezp</groupId>
				<artifactId>config-client</artifactId>
				<version>0.0.1-SNAPSHOT</version>
				<packaging>jar</packaging>

				<name>config-client</name>
				<description>Demo project for Spring Boot</description>

				<parent>
					<groupId>com.forezp</groupId>
					<artifactId>sc-f-chapter6</artifactId>
					<version>0.0.1-SNAPSHOT</version>
				</parent>

				<dependencies>
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-web</artifactId>
					</dependency>
					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-config</artifactId>
					</dependency>
				</dependencies>

				<build>
					<plugins>
						<plugin>
							<groupId>org.springframework.boot</groupId>
							<artifactId>spring-boot-maven-plugin</artifactId>
						</plugin>
					</plugins>
				</build>
				
				6.3.2 配置bootstrap.properties 
				
					spring.application.name=config-client
					spring.cloud.config.label=master
					spring.cloud.config.profile=dev
					spring.cloud.config.uri= http://localhost:8888/
					server.port=8881
				
				6.3.3 写一个测试程序
					程序的入口类，写一个API接口“／hi”，返回从配置中心读取的foo变量的值
					
					@SpringBootApplication
					@RestController
					public class ConfigClientApplication {

						public static void main(String[] args) {
							SpringApplication.run(ConfigClientApplication.class, args);
						}

						@Value("${foo}")
						String foo;
						@RequestMapping(value = "/hi")
						public String hi(){
							return foo;
						}
					}

					打开网址访问：http://localhost:8881/hi，网页显示：

					这就说明，config-client从config-server获取了foo的属性，而config-server是从git仓库读取的,如图：

	7 高可用分布式配置中心（spring cloud config）
		服务实例很多时，都从配置中心读取文件，这时可以考虑将配置中心做成一个微服务
		7.1 创建 Eureka Server
			起步依赖spring-cloud-starter-netflix- eureka-server
			pom.xml
			aplication.yml 
				server:
				  port: 8889

				eureka:
				  instance:
					hostname: localhost
				  client:
					registerWithEureka: false
					fetchRegistry: false
					serviceUrl:
					  defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/

			application.java  
		
		7.2 config-server 
			7.2.1 pom.xml 
				<dependencies>
					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
					</dependency>
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-web</artifactId>
					</dependency>
					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-config-server</artifactId>
					</dependency>

				</dependencies>
			7.2.2 application.yml
				spring.application.name=config-server
				server.port=8888

				spring.cloud.config.server.git.uri=https://github.com/forezp/SpringcloudConfig/
				spring.cloud.config.server.git.searchPaths=respo
				spring.cloud.config.label=master
				spring.cloud.config.server.git.username= your username
				spring.cloud.config.server.git.password= your password
				eureka.client.serviceUrl.defaultZone=http://localhost:8889/eureka/
			7.2.3 启动类
				Application加上@EnableEureka
		7.3 config-client
			7.3.1 pom.xml 
				起步依赖spring-cloud-starter-netflix-eureka-client
				
				<dependencies>
					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-config</artifactId>
					</dependency>

					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-web</artifactId>
					</dependency>

					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
					</dependency>
				</dependencies>

			7.3.2 bootstrap.properties
				spring.application.name=config-client
				spring.cloud.config.label=master
				spring.cloud.config.profile=dev
				#spring.cloud.config.uri= http://localhost:8888/

				eureka.client.serviceUrl.defaultZone=http://localhost:8889/eureka/
				spring.cloud.config.discovery.enabled=true
				spring.cloud.config.discovery.serviceId=config-server
				server.port=8881

			依次启动eureka-servr,config-server,config-client
			访问网址：http://localhost:8889/
	8.0 消息总线程（springcloudBus）
			将分布式的节点用轻量的消息代理连接起来,它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控
			rabbitmq安装启动 
				在rabbitmq的安装目录下找到sbin目录，进入并在此目录打开cmd窗口(进入sbin的cmd窗口)。
				输入rabbitmq-plugins enable rabbitmq_management命令
		8.1 config-client
				8.1.1 pom.xml 
					起步依赖 spring-cloud-starter-bus-amqp
						<dependencies>
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-starter-config</artifactId>
							</dependency>

							<dependency>
								<groupId>org.springframework.boot</groupId>
								<artifactId>spring-boot-starter-web</artifactId>
							</dependency>

							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
							</dependency>

							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-starter-bus-amqp</artifactId>
							</dependency>

							<dependency>
								<groupId>org.springframework.boot</groupId>
								<artifactId>spring-boot-starter-actuator</artifactId>
							</dependency>
						</dependencies>
				8.1.2 application.properties
					spring.rabbitmq.host=localhost
					spring.rabbitmq.port=5672
					spring.rabbitmq.username=guest
					spring.rabbitmq.password=guest

					spring.cloud.bus.enabled=true
					spring.cloud.bus.trace.enabled=true
					management.endpoints.web.exposure.include=bus-refresh
					
				8.1.3 configClientApplication 启动类
					@SpringBootApplication
					@EnableEurekaClient
					@EnableDiscoveryClient
					@RestController
					@RefreshScope
					public class ConfigClientApplication {

						/**
						 * http://localhost:8881/actuator/bus-refresh
						 */

						public static void main(String[] args) {
							SpringApplication.run(ConfigClientApplication.class, args);
						}

						@Value("${foo}")
						String foo;

						@RequestMapping(value = "/hi")
						public String hi(){
							return foo;
						}
					}

			依次启动eureka-server、confg-cserver,启动两个config-client，端口为：8881、8882。

			访问http://localhost:8881/hi
			我们只需要发送post请求： 重新读取配置
			http://localhost:8881/actuator/bus-refresh
	9 服务链路追踪 (spring cloud sleuth/zipkin)
		springCloudAleuth 提供追踪解决方案 ，解决 链路上任何一个服务出现问题或者网络超时，都会形成导致接口调用失败。随着业务的不断扩张，服务之间互相调用会越来越复杂。
		span基本工作单元，新建一个span等同于发送一个rpc
		trace：一系列spans组成一个树状结构
		工程 
			server-zipkin 收集调用数据
			service-miya  对外暴露miya接口
			相互调用才会收集数据
			
			9.1 server-zipkin 
				application.yml 
					server.port=9411
				aplication.java 启动类 
					@EnableZipkinServer
				pom.xml 
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter</artifactId>
					</dependency>

					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-web</artifactId>
					</dependency>
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-test</artifactId>
						<scope>test</scope>
					</dependency>

					<dependency>
						<groupId>io.zipkin.java</groupId>
						<artifactId>zipkin-server</artifactId>
					</dependency>

					<dependency>
						<groupId>io.zipkin.java</groupId>
						<artifactId>zipkin-autoconfigure-ui</artifactId>
					</dependency>

				

					}
			9.2 service-hi 
				9.2.1 pom.xml  
					引入起步依赖spring-cloud-starter-zipkin
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-web</artifactId>
					</dependency>

					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-zipkin</artifactId>
					</dependency>
				9.2.2 application.yml 
					server.port=8988
					spring.zipkin.base-url=http://localhost:9411
					spring.application.name=service-hi
				
				9.2.3 application.java 启动类
					@Autowired
					private RestTemplate restTemplate;

					@Bean
					public RestTemplate getRestTemplate(){
						return new RestTemplate();
					}

					@RequestMapping("/hi")
					public String callHome(){
						LOG.log(Level.INFO, "calling trace service-hi  ");
						return restTemplate.getForObject("http://localhost:8989/miya", String.class);
					}
					@RequestMapping("/info")
					public String info(){
						LOG.log(Level.INFO, "calling trace service-hi ");

						return "i'm service-hi";
				
				
			9.3 service-miya
				9.3.1 pom.xml 
					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-web</artifactId>
					</dependency>
					<!--compile('org.springframework.cloud:spring-cloud-starter-zipkin')-->

					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-zipkin</artifactId>
					</dependency>

					<dependency>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-test</artifactId>
						<scope>test</scope>
					</dependency>
				9.3.2 application.properties 
					server.port=8989
					spring.zipkin.base-url=http://localhost:9411
					spring.application.name=service-miya
				9.3.3 aplication.java 	
					@SpringBootApplication
					@RestController
					public class ServiceMiyaApplication {

						public static void main(String[] args) {
							SpringApplication.run(ServiceMiyaApplication.class, args);
						}

						private static final Logger LOG = Logger.getLogger(ServiceMiyaApplication.class.getName());


						@RequestMapping("/hi")
						public String home(){
							LOG.log(Level.INFO, "hi is being called");
							return "hi i'm miya!";
						}

						@RequestMapping("/miya")
						public String info(){
							LOG.log(Level.INFO, "info is being called");
							return restTemplate.getForObject("http://localhost:8988/info",String.class);
						}

						@Autowired
						private RestTemplate restTemplate;

						@Bean
						public RestTemplate getRestTemplate(){
							return new RestTemplate();
						}
					}
			http://localhost:8989/miya 
			http://localhost:8988/hi
			http://localhost:9411/traces/3ad8cf63ab22224c			
			
	10 高可用服务注册中心
		eureka server 集群化
		10.1 application.yml 
			---
			spring:
			   profiles: peer1
			server:
			   port: 8761
			eureka:
			   instance:
				  hostname: peer1
			   client:
				  serviceUrl:
					 defaultZone: http://peer2:8769/eureka/

			---
			spring:
			   profiles: peer2
			server:
			   port: 8769
			eureka:
			   instance:
				  hostname: peer2
			   client:
				  serviceUrl:
					 defaultZone: http://peer1:8761/eureka/
		10.2 service-hi 
			application.yml 
				server:
				  port: 8762

				spring:
				  application:
					name: service-hi

				eureka:
				  client:
					serviceUrl:
					  defaultZone: http://peer1:8761/eureka/
					  
				
	12 断路器(hystrix dashboard)
		为例保证程序的可用性，防止程序出错导致网络阻塞，出现了断路器模型
		13.1 service-hi
			13.1.1 pom.xml 
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-actuator</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-starter-hystrix-dashboard</artifactId>
				</dependency>
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-starter-hystrix</artifactId>
				</dependency>

			
		
			
					