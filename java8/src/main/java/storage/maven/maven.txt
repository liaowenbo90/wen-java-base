maven
	快速构建工具（编译、测试、打包），可跨平台
	依赖管理工具、管理类库（管理jar依赖、解决冲突）
	win安装
		配置 MAVEN_HOME PATH环境变量
		cmd mvn -vesion
	setting.xml
		localRepository 本地仓库位置
		interativeMode true/false 交互模式（是否志用户交互取得输入）
		offline true/false 离线模式
		pluginGroup 插件分组
		proxies 代理 profiles多代理配置 环境切换
		servers 配置凭证
		mirrors 下载镜像 为仓库配置下载镜像列表 
		profiles 个性化配置--配置私服地址
	pom.xml
		<modelVersion>4.0.0</modelVersion> maven2、3只能是4.0.0版本
		<groupId>com.apthech.maven</groupId>组 ID  所属项目组 ，规则：公司名+项目名
		<artifaceId>hello-world</apthech> ：构件 ID 当前项目在组中的唯一id 一般maven项目都是分块的
		version：版本号
		packaging：打包方式，默认为 jar  另外二个 war、pom
		scope 依赖的范围、
		exclusions  用来排除传递性依赖、
		optional  标记依赖是否可选。如果标记为可选，那么 Maven 不会传递依赖。
	maven 项目创建 
		web 
		new - module -maven - create archetype - maven-archetype-webapp 
		
		1、src/main/java 目录下放置项目主代码
		2、src/main/resources 目录下放置项目主代码配置文件
		3、src/test/java 目录下放置测试代码
		4、src/test/resources 目录下放置测试资源文件
		5、src/main/webapp 目录下放置 web-root 信息
		
		
		mvn clean compile  编译本项目  的 class 文件，放 在 target 目录下
		mvn clean test   执行单元测试 会输出单元测试报告。
		mvn clean package 打包项目  的 jar 或者 war 会在 target 目录下生成 jar 包。
		mvn clean install   （安装项目 jar 或者 war，到本地仓库中 会自动执行 package。Copy jar 包和 pom 文件到本地仓库中，从而其他项目可以共享
		mvn archetype:generate -DarchetypeCatalog=internal -DgroupId=com.aptech.maven -DartifactId=hello-world01  生成 Java 项目骨架
		项目部署到 web 服务器（Jetty、Tomcat）
		
		jar
			new - module - maven - quickstart

	
maven 坐标依赖
	传递性依赖
	依赖传递
	依赖范围
		scope 依赖的范围、
	依赖的调解
		exclusions  用来排除传递性依赖、
	可选依赖
		optional  标记依赖是否可选。如果标记为可选，那么 Maven 不会传递依赖。
maven 仓库
	本地仓库 
		本地仓库没有构建的时候，都会从中央仓库下载构建。本地仓库就一个，但是可配置多个远程仓库。
		
私服
	私服是另外一种特殊的远程仓库，为了节省宽带和时间，一般在局域网中架设私服，用其代理所有的外部远程仓库。内部项目还能部署到私服，
	远程仓库配置、认证、部署
		<repositories></
		<server></
镜像
	如果仓库 X 可以获取仓库 Y 存储的所有内容，那么 X 就可以认为是 Y 的一个镜像。

maven生命周期
	生命周期是对所有构建过程的抽象和统一，括清理、编译、测试、打包、集成测试、验证、部署、站点生成、
	
	生命周期相关的插件如下： build(){initialize(),compile(),test(),package(),integrationTest(),deploy();}
	编译插件：maven-compiler-plugin
	测试插件：maven-surefire-plugin
插件配置
	跳过单元测试
		mvn install -Dmaven.test.skip=true
		
	

	<!--保证打出的 jar 包可运行-->
	<plugin>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-jar-plugin</artifactId>
		<configuration>
			<archive>
				<manifest>
					<mainClass>com.jx.helloworld.App</mainClass>
					<addClasspath>true</addClasspath>
					<classpathPrefix>lib/</classpathPrefix>
				</manifest>
			</archive>
		</configuration>
	</plugin>	
		
maven 聚合和继承
	聚合特性可以把各个模块聚合在一起构建
	继承特性可以抽取各个模块相同依赖和插件
	
		
nexus 私服
	作用：加速构件，减少中央仓库的压力、外网开销
	Nexus仓库
		包括代理仓库、宿主仓库、仓库组
		group仓库组、 将策略为 Release 或者 Snapshot 的仓库聚合统 一提供服务
			repositories-group-release 仓库聚合并通过一致的地址对外服务
		hosted宿主仓库、
			3rd party--hosted--release  部署无法从公共仓库获取的第三方发布构建版
			Releases-hosted-release   用于部署内部的发布版本构建
			Snapshots-hosted-snapshot  用于部署内部的快照版本构建
		proxy 代理仓库以及 
			Central-proxy-release  只会下载和缓存中央仓库发布的版本构建
		virtual 虚拟仓库
	安装
		下载解压
			wget http://download.sonatype.com/nexus/3/latest-unix.tar.gz 
		
		启动 
			./nexus run & 
		访问
			http://192.168.24.129:8081/#browse/browse
			
			http://192.168.24.129:8081/repository/java/
			
		配置maven setting.xml
			 <servers>
				<server>
					<id>maven-releases</id>
					<username>bobo</username>
					<password>bobo123</password>
				</server>
				<server>
					<id>maven-snapshots</id>
					<username>bobo</username>
					<password>bobo123</password>
				</server>
			</servers>
		配置pom.xml	
			<distributionManagement>
			<repository>
			  <id>maven-releases</id>
			  <url>http://192.168.24.129:8081/repository/maven-releases/</url>
			</repository>
			<snapshotRepository>
			  <id>maven-snapshots</id>
			  <url>http://192.168.24.129:8081/repository/maven-snapshots/</url>
			</snapshotRepository>
		  </distributionManagement>

		  <!--远程仓库列表，它是Maven用来填充构建系统本地仓库所使用的一组远程项目。 -->
		  <repositories>
			<!--包含需要连接到远程仓库的信息 -->
			<repository>
			  <!--远程仓库唯一标识 -->
			  <id>maven-public</id>
			  <!--远程仓库URL，按protocol://hostname/path形式 -->
			  <url>http://192.168.24.129:8081/repository/maven-public/</url>
			  <!--如何处理远程仓库里发布版本的下载 -->
			  <releases>
				<!--true或者false表示该仓库是否开启下载 -->
				<enabled>true</enabled>
			  </releases>
			  <!--如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。 -->
			  <snapshots>
				<!--true或者false表示该仓库是否开启下载 -->
				<enabled>true</enabled>
			  </snapshots>
			</repository>
		  </repositories>
		
		
		打包
			mvn clean compile
			mvn clean package 
			mvn clean source:jar package
			mvn deploy -e
			
			
			