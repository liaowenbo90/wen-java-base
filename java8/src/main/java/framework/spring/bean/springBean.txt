bean 任用域
	组成应用程序的主体，IOC装配及管理的对象
	每个bean默认单例、每个action单例，bean 的单例基于beanFactory ,spring容器
	类别
		singleton 仅存在一个bean,容器共享一个实例
			配置
			xml <bean id="ServiceImpl" class="cn.csdn.service.ServiceImpl" scope="singleton">
			```java @Service @Scope("singleton") public class ServiceImpl{
		prototype 每次从容器调用都返回一个新的bean
			配置
			java <bean id="account" class="com.foo.DefaultAccount" scope="prototype"/> 或者 <bean id="account" class="com.foo.DefaultAccount" singleton="false"/>
		request    每次http请求都会创建一个新的bean，请求结束则生命周期结束
			java <bean id="loginAction" class=cn.csdn.LoginAction" scope="request"/>
		session		同一个 http session 共享一个Bean,不同的使用不同的bean
			xml <bean id="userPreferences" class="com.foo.UserPreferences" scope="session"/>
		globalSession 
		
bean的生命周期
	spring容器初始化
		GiraffeService无参构造函数  GiraffeService中利用set方法设置属性值 调用setBeanName
		GiraffeService中利用set方法设置属性值 调用setBeanName
		setBeanClassLoader,ClassLoade
		setBeanFactory,setBeanFactory
		setResourceLoader
		setApplicationContext
		postProcessBeforeInitialization
		postProcessAfterInitialization
	调用initialization 和 destroy
		<bean name="giraffeService" class="com.giraffe.spring.service.GiraffeService" init-method="initMethod" destroy-method="destroyMethod"> </bean>
		Spring 也支持用 @PostConstruct和 @PreDestroy注解来指定 init 和 destroy 
		
		ApplicationContextAware: 获得ApplicationContext对象,可以用来获取所有Bean definition的名字。
		BeanFactoryAware:获得BeanFactory对象，可以用来检测Bean的作用域。
		BeanNameAware:获得Bean在配置文件中定义的名字。
		ResourceLoaderAware:获得ResourceLoader对象，可以获得classpath中某个文件。
		ServletContextAware:在一个MVC应用中可以获取ServletContext对象，可以读取context中的参数。
		ServletConfigAware： 在一个MVC应用中可以获取ServletConfig对象，可以读取config中的参数。
		
	bean生命周期流程
		Bean容器找到配置文件中 Spring Bean 的定义。
		Bean容器利用Java Reflection API创建一个Bean的实例。
		如果涉及到一些属性值 利用set方法设置一些属性值。
		如果Bean实现了BeanNameAware接口，调用setBeanName()方法，传入Bean的名字。
		如果Bean实现了BeanClassLoaderAware接口，调用setBeanClassLoader()方法，传入ClassLoader对象的实例。
		如果Bean实现了BeanFactoryAware接口，调用setBeanClassLoader()方法，传入ClassLoader对象的实例。
		与上面的类似，如果实现了其他*Aware接口，就调用相应的方法。
		如果有和加载这个Bean的Spring容器相关的BeanPostProcessor对象，执行postProcessBeforeInitialization()方法
		如果Bean实现了InitializingBean接口，执行afterPropertiesSet()方法。
		如果Bean在配置文件中的定义包含init-method属性，执行指定的方法。
		如果有和加载这个Bean的Spring容器相关的BeanPostProcessor对象，执行postProcessAfterInitialization()方法
		当要销毁Bean的时候，如果Bean实现了DisposableBean接口，执行destroy()方法。
		当要销毁Bean的时候，如果Bean在配置文件中的定义包含destroy-method属性，执行指定的方法。
		
	
		