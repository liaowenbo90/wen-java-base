jvm
类的加载机制
		什么是类的加载
			类的.class文件中的二进制数据读入到内存中，将其放在运行
			时数据区的方法区内，在堆区创建一个java.lang.Class对象，用来封装类在
			方法区内的数据结构。（过程）
			类的加载的最终产品是位于堆区中的Class对象，Class对象
			封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据
			结构的接口。（结果）
		加载机制
			全盘负责，一个类加载器负责某个Class、及所依赖和引用它的类都负责
			父类委托：父类加载器先尝试加载，不行则子类才会尝试加载自己的类
			缓存机制：保证所有加载过的Class类都会被缓存，当程序要用类的时候，
先从缓存中找，找不到的时候,系统才从读取该类的二进制数据，并将其转
换成Class对象，存入缓存

		类的生命周期
			加载、连接（验证、准备、解析） 、初始化、使用、卸载
				加载：查找并加载类的二进制数据，在java堆中创建一个.Class的对象
				连接：
					验证：文件格式、元数据、字节码、符号引用验证
					准备：为类的静态变量分配内存、并将初始默认值
					解析：把类中的符号引用转换为直接引用
				初始化：为类的静态变量赋正确初始值
				使用：new对象程序使用
				卸载：执行回收垃圾
		类加载器
			启动类加载器：加载能被虚拟机识别的JDK/jre/lib的一些类库
				（Bootstrap ClassLoader）
			扩展类加载器：加载能被虚拟机识别JDK/jre/lib/ext 的一些类库，能被开发者使用
				（Extension ClassLoader）
			应用程序类加载器：加载用户所指定的类路径（Application ClassLoader）


		双亲委派模型
	jvm内存结构
		内存结构：
			java堆（Heap）:内存最大的一块，启动时创建，唯一目地存放对象实例(共享线程)
			JVM栈（Stacks）：每个方法执行的时候会创建栈帧，栈帧从入栈到出栈过程，
用于存储变量表、
				操作栈、动态链、方法出口等
			方法区（Method Area）:用于存被加载的，类信息、常量、静态变量、即时编译
代码(共享线程)
			程序计数器（program Counter Register）：所执行字节码行号指示器
		对象分配规则：
			对象优先分配在Eden区
			大对象直接进入老年代、长期存活的对象进入老年代
			动态判断年龄，进入老年代
			空间分配担保

GC算法 垃圾回收
		对象存活判断
			引用计算：每一个对象有一个计算引用属性，新增加一、释放减一，计数0回收
			可达性分析：从GC Roots 开始向下搜索，搜索过的路径称为引用链，当对象
				没有引用链则证明不可达

		GC算法
			标记-清除算法
				两阶段，标记出需要回收的对象，清除所有标记的对象
			复制算法
				内存分成两块，一块用完就将存活的对象手复制到别一块，再把用完的一块清了
			标记-压缩算法
				先标记后再让存活的对象移到一端，再清掉一端外的内存
			垃圾回收一般采用分代收集算法
				新生代和老年代，根据各个年代特点采用适当的收集算法
		垃圾回收器
			serial:串行收集器，最古老、最稳定、较长停顿、一个线程回收
			parnew:serial多线程版
			parallel:类似serial，关注吞吐量
			parallel old:parallel scavengel 老年代版，多线程、标记-整理算法
			cms:获取最短回收停顿时间为目标
			G1:面向服务，针对配备多颗、大容量内存机器、高概率满GC停顿、高吞吐量

	GC分析 命令调优
		GC日志分析
			年轻代gc回收、full(时间、次数、停顿)gc回收
			PSYoungGen:gc回收前后年轻代内存变化，内存回收较频繁，耗时短
			ParOldGen:gc回收前后老年代有内存变化
			PSPermGen:gc回收永代区内存变化
			full gc 会对整个内存堆进行回城，耗时长，尽量减少
		调优命令
			sun JDK 监控、故障处理命令 ，jps,jstat,jmap,jhat,jstack,jinfo
			jps：hotspot虚拟机进程
			jstat:虚拟机运行时状态信息
			jmap:用于生成geap dump文件(线程、内存、)
			jhat:用来分析heap dump文件
			jstack:生成java虚拟机当前线程快照
			jinfo:查看和调整虚拟机运行参数

		调优工具
			jdk自带
				jconsole：jvm内存、线程、类等监控
				jvisualvm：全能工具，分析内存快照、线程快照、监控内存变化、GC变化
			第三方
				MAT：基于eclipse 内存分析工具
				GChisto：分析gc日志工具

