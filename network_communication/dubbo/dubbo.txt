dubbo
	概念：高性能、轻量级的rpc框架
	三大核心能力
		提供远程调用
		容错、负载均衡
		服务自动发现和注册
	
	角色:
		注册中心：服务注册与发现中心
		服务提供者：暴露服务提供方 	
		服务消费者: 调用远程服务的消费方
		监控中心：统计调用服务的次数与时间
		运行容器
			注册中心与服务提供者、服务消费者通过长连接联系，服务当机会立即通知消费者
			注册中心提供服务地址列表给消费者
		工作原理各层说明：
		第一层：service层，接口层，给服务提供者和消费者来实现的
		第二层：config层，配置层，主要是对dubbo进行各种配置的
		第三层：proxy层，服务接口透明代理，生成服务的客户端 Stub 和服务器端 Skeleton
		第四层：registry层，服务注册层，负责服务的注册与发现
		第五层：cluster层，集群层，封装多个服务提供者的路由以及负载均衡，将多个实例组合成一个服务
		第六层：monitor层，监控层，对rpc接口的调用次数和调用时间进行监控
		第七层：protocol层，远程调用层，封装rpc调用
		第八层：exchange层，信息交换层，封装请求响应模式，同步转异步
		第九层：transport层，网络传输层，抽象mina和netty为统一接口
		第十层：serialize层，数据序列化层。网络传输需要。
	dubbo负载均衡策略
		随机，按权重设置比例
		轮循，按公约后的权重设置比例，存在慢的积累请求问题
		最少活跃数调用，相同活跃数随机
		一致性hash:相同参数请求发送到同一提供者
	
		
	rpc
		概念：远程过程调用
		执行过程
			1、服务消费方（client）调用以本地调用方式调用服务；
			2、client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；
			3、client stub找到服务地址，并将消息发送到服务端；
			
			4、server stub收到消息后进行解码；
			5、server stub根据解码结果调用本地的服务；
			6、本地服务执行并将结果返回给server stub；
			
			7、server stub将返回结果打包成消息并发送至消费方；
			
			8、client stub接收到消息，并进行解码；
			9、服务消费方得到最终结果。
	SOA 
		把工程拆分成业务层、表现层，面向服务、分布式框架
		两个角色：provider服务提供者、comsumer服务使用者
	
	
	特性：
		负载均衡——同一个服务部署在不同的机器时该调用那一台机器上的服务，负载均衡：优化资源使用、提高吞吐量、减少响应时间
		服务调用链路生成——服务之间互相是如何调用的
		服务访问压力以及时长统计——当前系统的压力主要在哪里，如何来扩容和优化
		服务降级——某个服务挂掉之后调用备用服务
	配置方式：
		xml 配置方式
		服务端服务级别
		java <dubbo:service interface="..." loadbalance="roundrobin" /> 客户端服务级别
		java <dubbo:reference interface="..." loadbalance="roundrobin" />
		服务端方法级别
		java <dubbo:service interface="..."> <dubbo:method name="..." loadbalance="roundrobin"/> </dubbo:service>
		客户端方法级别
		java <dubbo:reference interface="..."> <dubbo:method name="..." loadbalance="roundrobin"/> </dubbo:reference>
	
			