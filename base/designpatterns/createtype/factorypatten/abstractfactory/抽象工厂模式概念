模式问题：工厂方法存在一个严重问题,一个具体工厂只能创建一类产品,实际过程中,一个工厂需要生产多类产品
解决方案：抽象工厂模式
    提供一个创建一系列相关或相互依赖对象的接口，而无需指定具体,具体工厂负责具体类实现
    作用：使用抽象接口来创建一组相关产品，不需要关心实际生产出的具体产品是什么，这个就可以从具体产品中被解耦
    解决的问题：每个工厂只能创建一类产品
    角色：
        抽象产品族：抽象产品的父类,抽象产品的公共接口
        抽象产品：具体的产品父类,具体产品的公共接口
        具体产品：抽象产品的子类,工厂类创建的目标类,具体产品
        抽象工厂：具体工厂的父类,具体工厂的公共接口
        具体工厂：抽象工厂的子类,被外部调用
    区别：
        1、抽象工厂中每个工厂可以创建多种类的产品,而工厂方法每个工厂只能创建一类产品
        2、工厂方法模式只有一个抽象产品类,而抽象工厂模式有多个
    特点：
        多个抽象产品类,每个产品类多个具体产品类
        一个抽象工厂类，可以派生多个具体产品类实例
    使用步骤
        步骤1： 创建抽象工厂类，定义具体工厂的公共接口；
        步骤2： 创建抽象产品族类 ，定义抽象产品的公共接口；
        步骤3： 创建抽象产品类 （继承抽象产品族类），定义具体产品的公共接口；
        步骤4： 创建具体产品类（继承抽象产品类） & 定义生产的具体产品；
        步骤5：创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法；
        步骤6：客户端通过实例化具体的工厂类，并调用其创建不同目标产品的方法创建不同具体产品类的实例
    优点：
        降低耦合
            将具体产品创建延迟到具体子类工厂,减少客户与具体产品类之间的依赖,使系统耦合度低,利于维护和扩展
        更符合开-闭原则
            新增一类产品，只需要增加相应具体产品、相应工厂子类
        符合单一职责原则
    缺点：
        抽象工厂很难支持新种类产品的变化
            抽象工厂接口已经确定了可以被创建的产品集合,添加新产品,此时必须修改抽象工厂接口
    应用场景：
        一个系统不要求依赖产品类实例如何创建、表达
        系统有多个系列产品,而系统只消费某一系列产品
        系统要求提供一个产品类的库，所有产品以同样的接口实现，客户不依赖具体实现








