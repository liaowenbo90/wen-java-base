桥接模式
    定义：将抽象部分与实现部分分离,使它们都可以独立变化
    作用、解决问题：将抽象与实现解耦,某个类具有两个或者以上的维度变化，如果只是继承将无法满足需要
    角色：
        abstraction(抽象接口),拥有一个Implementor类型的对象引用，Abstraction提供更高层次的调用
        refinedAbstraction(扩展abstraction接口)，扩展Abstraction中的接口定义
        implementor(具体实现类接口)，
        concreteImplementor(具体实现类)
    步骤：
        举个简单例子（评判一个地方红烧肉的口味，这里出现了两个维度的变化：地域和餐馆品牌）
        1 Implementor(这里是餐馆的接口)
        2 ConcreteImplementor（具体的餐馆：小南国和外婆家）
        3 Abstraction（城市抽象类，这里包含了一个Implementor）
        4 RefinedAbstraction（具体的城市类）
        5 测试代码

    要点：
        1解耦了抽象和实现之间固有的绑定关系，抽象和实现可以沿着各自的维度来变化
        2类似于多继承方案，
        3一般应用在 两个非常强的变化维度，两个变化不会导致交错结果，并不一定使用桥接模式
    使用场景：
        1不希望抽象和实现部分采用绑定关系，把抽象和实现部分分开
        2抽象部分和实现部分都应该扩展
        3希望实现部分修改，不会对客户产生影响
        4如果采用继承方案会产生很多子类，分析功能和原因是否能生成不同维度

        jdk中的桥接模式： JDBC
            各个数据库之间进行切换，JDBC提供了统一的接口，每个数据库提供各自的实现,叫做数据库驱动程序
