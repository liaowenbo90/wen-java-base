<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.jx.helloworld</groupId>
  <artifactId>hellowroldweb</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>hellowroldweb Maven Webapp</name>

  <modules>
    <module>../helloworld-service</module>
  </modules>


  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
    <service_version>1.0-SNAPSHOT</service_version>
    <junit_servion>4.11</junit_servion>
  </properties>


  <dependencyManagement>
    <!--  -->
    <dependencies>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>${junit_servion}</version>
        <scope>test</scope>
      </dependency>
    </dependencies>

  </dependencyManagement>


  <distributionManagement>
    <repository>
      <id>maven-releases</id>
      <url>http://192.168.24.129:8081/repository/maven-releases/</url>
    </repository>
    <snapshotRepository>
      <id>maven-snapshots</id>
      <url>http://192.168.24.129:8081/repository/maven-snapshots/</url>
    </snapshotRepository>
  </distributionManagement>

  <!--远程仓库列表，它是Maven用来填充构建系统本地仓库所使用的一组远程项目。 -->
  <repositories>
    <!--包含需要连接到远程仓库的信息 -->
    <repository>
      <!--远程仓库唯一标识 -->
      <id>maven-public</id>
      <!--远程仓库URL，按protocol://hostname/path形式 -->
      <url>http://192.168.24.129:8081/repository/maven-public/</url>
      <!--如何处理远程仓库里发布版本的下载 -->
      <releases>
        <!--true或者false表示该仓库是否开启下载 -->
        <enabled>true</enabled>
      </releases>
      <!--如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。 -->
      <snapshots>
        <!--true或者false表示该仓库是否开启下载 -->
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>

  <build>
    <finalName>hellowroldweb</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>



        <!--保证打出的 jar 包可运行-->
        <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
        <archive>
        <manifest>
        <mainClass>com.jx.helloworld.App</mainClass>
        <addClasspath>true</addClasspath>
          <classpathPrefix>lib/</classpathPrefix>
        </manifest>
        </archive>
        </configuration>
        </plugin>


      </plugins>
    </pluginManagement>
  </build>
</project>
